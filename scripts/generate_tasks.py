#!/usr/bin/env python3
"""
Generate C++ task configuration from YAML file
Usage: python generate_tasks.py [input.yaml] [output.hpp]
"""

import sys
import yaml
from pathlib import Path

def priority_to_cpp(priority_str):
    """Convert priority string to C++ enum"""
    priority_map = {
        'idle': 'priority::idle',
        'low': 'priority::low',
        'normal': 'priority::normal',
        'high': 'priority::high',
        'critical': 'priority::critical'
    }
    return priority_map.get(priority_str.lower(), 'priority::normal')

def generate_task_config_header(yaml_file, output_file):
    """Generate C++ header from YAML task configuration"""
    
    # Load YAML
    with open(yaml_file, 'r') as f:
        config = yaml.safe_load(f)
    
    tasks = config.get('tasks', [])
    
    # Generate header content
    header = f"""#pragma once

// Auto-generated from {Path(yaml_file).name}
// DO NOT EDIT THIS FILE MANUALLY

#include <emCore/task/task_config.hpp>

namespace emCore {{

// Forward declare task functions
"""
    
    # Forward declarations
    for task in tasks:
        func_name = task['function']
        header += f"void {func_name}(void* params) noexcept;\n"
    
    header += f"""
// Task configuration table
constexpr task_config task_table[] = {{
"""
    
    # Task configurations
    for i, task in enumerate(tasks):
        name = task['name']
        func = task['function']
        priority = priority_to_cpp(task.get('priority', 'normal'))
        period = task.get('period_ms', 0)
        enabled = 'true' if task.get('enabled', True) else 'false'
        
        header += f"""    // {task.get('description', name)}
    task_config(
        &{func},           // function
        "{name}",          // name
        {priority},        // priority
        {period},          // period_ms
        nullptr,           // parameters
        {enabled}          // enabled
    )"""
        
        if i < len(tasks) - 1:
            header += ","
        header += "\n"
    
    header += """};

constexpr size_t task_table_size = sizeof(task_table) / sizeof(task_config);

}  // namespace emCore
"""
    
    # Write output
    with open(output_file, 'w') as f:
        f.write(header)
    
    print(f"Generated {output_file} with {len(tasks)} tasks")

def main():
    if len(sys.argv) < 2:
        print("Usage: python generate_tasks.py [input.yaml] [output.hpp]")
        print("Using default: config/default_tasks.yaml -> src/emCore/task/generated_tasks.hpp")
        yaml_file = Path(__file__).parent.parent / "config" / "default_tasks.yaml"
        output_file = Path(__file__).parent.parent / "src" / "emCore" / "task" / "generated_tasks.hpp"
    else:
        yaml_file = Path(sys.argv[1])
        output_file = Path(sys.argv[2]) if len(sys.argv) > 2 else Path("generated_tasks.hpp")
    
    if not yaml_file.exists():
        print(f"Error: {yaml_file} not found")
        sys.exit(1)
    
    generate_task_config_header(yaml_file, output_file)

if __name__ == "__main__":
    main()
